 Widget signupSegment(context) {
    TextEditingController _mail = TextEditingController();
    TextEditingController _pw = TextEditingController();
    return Column(
      children: <Widget>[
        CupertinoFormSection.insetGrouped(
            header: const Text('Sign Up'),
            children: [
              CupertinoTextFormFieldRow(
                controller: _mail,
                prefix: const Icon(CupertinoIcons.mail),
                placeholder: 'email',
                validator: (String? value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a value';
                  }
                  return null;
                },
              ),
              CupertinoTextFormFieldRow(
                controller: _pw,
                prefix: const Icon(CupertinoIcons.padlock),
                placeholder: 'password',
                validator: (String? value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a value';
                  }
                  return null;
                },
              ),
            ]),
        CupertinoButton.filled(
          onPressed: () async {
            await signUp(_mail.text, _pw.text);
          },
          child: const Text('Sign up'),
        ),
      ],
    );
  }

  Future<void> signUp(String email, String password) async {
    Auth _auth = Auth();
    await _auth.signUp(email, password);
  }

  // login segment
  Widget loginSegment(context) {
    TextEditingController _mail = TextEditingController();
    TextEditingController _pw = TextEditingController();
    return Column(
      children: <Widget>[
        CupertinoFormSection.insetGrouped(
            header: const Text('Login'),
            children: [
              CupertinoTextFormFieldRow(
                controller: _mail,
                prefix: const Icon(CupertinoIcons.mail),
                placeholder: 'email',
                validator: (String? value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a value';
                  }
                  return null;
                },
              ),
              CupertinoTextFormFieldRow(
                controller: _pw,
                prefix: const Icon(CupertinoIcons.padlock),
                placeholder: 'password',
                validator: (String? value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a value';
                  }
                  return null;
                },
              ),
            ]),
        CupertinoButton.filled(
          onPressed: () async {
            await login(_mail.text, _pw.text);
          },
          child: const Text('Login'),
        ),
      ],
    );
  }

  Future<void> login(String email, String password) async {
    Auth _auth = Auth();
    await _auth.signIn(email, password);
  }


  ChangeNotifierProvider<ScopedSegments>(
        create: (_) => scoped,
        child: Consumer<ScopedSegments>(
          builder: (context, value, child) => 
        ),
      ),